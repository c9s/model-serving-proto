// Code generated by protoc-gen-go. DO NOT EDIT.
// source: serving.proto

/*
Package serving is a generated protocol buffer package.

It is generated from these files:
	serving.proto

It has these top-level messages:
	DetectionResponse
	DetectionRequest
	Point
	Rectangle
	Region
	Shape
	Object
*/
package serving

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DetectionResponse struct {
	Type       string       `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Points     []*Point     `protobuf:"bytes,2,rep,name=points" json:"points,omitempty"`
	Objects    []*Object    `protobuf:"bytes,3,rep,name=objects" json:"objects,omitempty"`
	Rectangles []*Rectangle `protobuf:"bytes,4,rep,name=rectangles" json:"rectangles,omitempty"`
}

func (m *DetectionResponse) Reset()                    { *m = DetectionResponse{} }
func (m *DetectionResponse) String() string            { return proto.CompactTextString(m) }
func (*DetectionResponse) ProtoMessage()               {}
func (*DetectionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DetectionResponse) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *DetectionResponse) GetPoints() []*Point {
	if m != nil {
		return m.Points
	}
	return nil
}

func (m *DetectionResponse) GetObjects() []*Object {
	if m != nil {
		return m.Objects
	}
	return nil
}

func (m *DetectionResponse) GetRectangles() []*Rectangle {
	if m != nil {
		return m.Rectangles
	}
	return nil
}

type DetectionRequest struct {
	Image []byte     `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	Rect  *Rectangle `protobuf:"bytes,2,opt,name=rect" json:"rect,omitempty"`
}

func (m *DetectionRequest) Reset()                    { *m = DetectionRequest{} }
func (m *DetectionRequest) String() string            { return proto.CompactTextString(m) }
func (*DetectionRequest) ProtoMessage()               {}
func (*DetectionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *DetectionRequest) GetImage() []byte {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *DetectionRequest) GetRect() *Rectangle {
	if m != nil {
		return m.Rect
	}
	return nil
}

type Point struct {
	X int32 `protobuf:"varint,1,opt,name=x" json:"x,omitempty"`
	Y int32 `protobuf:"varint,2,opt,name=y" json:"y,omitempty"`
}

func (m *Point) Reset()                    { *m = Point{} }
func (m *Point) String() string            { return proto.CompactTextString(m) }
func (*Point) ProtoMessage()               {}
func (*Point) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Point) GetX() int32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Point) GetY() int32 {
	if m != nil {
		return m.Y
	}
	return 0
}

type Rectangle struct {
	X      int32 `protobuf:"varint,1,opt,name=x" json:"x,omitempty"`
	Y      int32 `protobuf:"varint,2,opt,name=y" json:"y,omitempty"`
	Width  int32 `protobuf:"varint,3,opt,name=width" json:"width,omitempty"`
	Height int32 `protobuf:"varint,4,opt,name=height" json:"height,omitempty"`
}

func (m *Rectangle) Reset()                    { *m = Rectangle{} }
func (m *Rectangle) String() string            { return proto.CompactTextString(m) }
func (*Rectangle) ProtoMessage()               {}
func (*Rectangle) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Rectangle) GetX() int32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Rectangle) GetY() int32 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *Rectangle) GetWidth() int32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *Rectangle) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

type Region struct {
	X      int32 `protobuf:"varint,1,opt,name=x" json:"x,omitempty"`
	Y      int32 `protobuf:"varint,2,opt,name=y" json:"y,omitempty"`
	Width  int32 `protobuf:"varint,3,opt,name=width" json:"width,omitempty"`
	Height int32 `protobuf:"varint,4,opt,name=height" json:"height,omitempty"`
}

func (m *Region) Reset()                    { *m = Region{} }
func (m *Region) String() string            { return proto.CompactTextString(m) }
func (*Region) ProtoMessage()               {}
func (*Region) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Region) GetX() int32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Region) GetY() int32 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *Region) GetWidth() int32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *Region) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

type Shape struct {
	ContentType string `protobuf:"bytes,1,opt,name=contentType" json:"contentType,omitempty"`
	// this field will be used when contentType == "polygon/points"
	Points []*Point `protobuf:"bytes,2,rep,name=points" json:"points,omitempty"`
	// this field will be used when contentType == "polygon/series"
	Series []int32 `protobuf:"varint,3,rep,packed,name=series" json:"series,omitempty"`
}

func (m *Shape) Reset()                    { *m = Shape{} }
func (m *Shape) String() string            { return proto.CompactTextString(m) }
func (*Shape) ProtoMessage()               {}
func (*Shape) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Shape) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *Shape) GetPoints() []*Point {
	if m != nil {
		return m.Points
	}
	return nil
}

func (m *Shape) GetSeries() []int32 {
	if m != nil {
		return m.Series
	}
	return nil
}

type Object struct {
	Label string     `protobuf:"bytes,1,opt,name=label" json:"label,omitempty"`
	Box   *Rectangle `protobuf:"bytes,2,opt,name=box" json:"box,omitempty"`
	Shape *Shape     `protobuf:"bytes,3,opt,name=shape" json:"shape,omitempty"`
}

func (m *Object) Reset()                    { *m = Object{} }
func (m *Object) String() string            { return proto.CompactTextString(m) }
func (*Object) ProtoMessage()               {}
func (*Object) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Object) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *Object) GetBox() *Rectangle {
	if m != nil {
		return m.Box
	}
	return nil
}

func (m *Object) GetShape() *Shape {
	if m != nil {
		return m.Shape
	}
	return nil
}

func init() {
	proto.RegisterType((*DetectionResponse)(nil), "serving.DetectionResponse")
	proto.RegisterType((*DetectionRequest)(nil), "serving.DetectionRequest")
	proto.RegisterType((*Point)(nil), "serving.Point")
	proto.RegisterType((*Rectangle)(nil), "serving.Rectangle")
	proto.RegisterType((*Region)(nil), "serving.Region")
	proto.RegisterType((*Shape)(nil), "serving.Shape")
	proto.RegisterType((*Object)(nil), "serving.Object")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ShapeDetection service

type ShapeDetectionClient interface {
	Detect(ctx context.Context, in *DetectionRequest, opts ...grpc.CallOption) (*DetectionResponse, error)
}

type shapeDetectionClient struct {
	cc *grpc.ClientConn
}

func NewShapeDetectionClient(cc *grpc.ClientConn) ShapeDetectionClient {
	return &shapeDetectionClient{cc}
}

func (c *shapeDetectionClient) Detect(ctx context.Context, in *DetectionRequest, opts ...grpc.CallOption) (*DetectionResponse, error) {
	out := new(DetectionResponse)
	err := grpc.Invoke(ctx, "/serving.ShapeDetection/Detect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ShapeDetection service

type ShapeDetectionServer interface {
	Detect(context.Context, *DetectionRequest) (*DetectionResponse, error)
}

func RegisterShapeDetectionServer(s *grpc.Server, srv ShapeDetectionServer) {
	s.RegisterService(&_ShapeDetection_serviceDesc, srv)
}

func _ShapeDetection_Detect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShapeDetectionServer).Detect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serving.ShapeDetection/Detect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShapeDetectionServer).Detect(ctx, req.(*DetectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ShapeDetection_serviceDesc = grpc.ServiceDesc{
	ServiceName: "serving.ShapeDetection",
	HandlerType: (*ShapeDetectionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Detect",
			Handler:    _ShapeDetection_Detect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "serving.proto",
}

// Client API for ObjectDetection service

type ObjectDetectionClient interface {
	Detect(ctx context.Context, in *DetectionRequest, opts ...grpc.CallOption) (ObjectDetection_DetectClient, error)
}

type objectDetectionClient struct {
	cc *grpc.ClientConn
}

func NewObjectDetectionClient(cc *grpc.ClientConn) ObjectDetectionClient {
	return &objectDetectionClient{cc}
}

func (c *objectDetectionClient) Detect(ctx context.Context, in *DetectionRequest, opts ...grpc.CallOption) (ObjectDetection_DetectClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ObjectDetection_serviceDesc.Streams[0], c.cc, "/serving.ObjectDetection/Detect", opts...)
	if err != nil {
		return nil, err
	}
	x := &objectDetectionDetectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ObjectDetection_DetectClient interface {
	Recv() (*Object, error)
	grpc.ClientStream
}

type objectDetectionDetectClient struct {
	grpc.ClientStream
}

func (x *objectDetectionDetectClient) Recv() (*Object, error) {
	m := new(Object)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ObjectDetection service

type ObjectDetectionServer interface {
	Detect(*DetectionRequest, ObjectDetection_DetectServer) error
}

func RegisterObjectDetectionServer(s *grpc.Server, srv ObjectDetectionServer) {
	s.RegisterService(&_ObjectDetection_serviceDesc, srv)
}

func _ObjectDetection_Detect_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DetectionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ObjectDetectionServer).Detect(m, &objectDetectionDetectServer{stream})
}

type ObjectDetection_DetectServer interface {
	Send(*Object) error
	grpc.ServerStream
}

type objectDetectionDetectServer struct {
	grpc.ServerStream
}

func (x *objectDetectionDetectServer) Send(m *Object) error {
	return x.ServerStream.SendMsg(m)
}

var _ObjectDetection_serviceDesc = grpc.ServiceDesc{
	ServiceName: "serving.ObjectDetection",
	HandlerType: (*ObjectDetectionServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Detect",
			Handler:       _ObjectDetection_Detect_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "serving.proto",
}

func init() { proto.RegisterFile("serving.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 384 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x53, 0x4d, 0x8f, 0xd3, 0x30,
	0x10, 0x5d, 0x6f, 0x3e, 0x56, 0x3b, 0xbb, 0xec, 0xc2, 0x08, 0x55, 0xa1, 0xa7, 0xc8, 0x54, 0x55,
	0xb9, 0x54, 0x28, 0x5c, 0xb8, 0x22, 0x71, 0xe3, 0x40, 0xe5, 0xc2, 0x0f, 0x48, 0xc2, 0x28, 0x71,
	0x55, 0xec, 0x10, 0x1b, 0x68, 0xff, 0x14, 0xbf, 0x11, 0xc5, 0x4e, 0xd3, 0xa8, 0x82, 0xaa, 0x87,
	0xbd, 0xf5, 0xcd, 0x7b, 0xf3, 0xfa, 0x46, 0xcf, 0x81, 0x67, 0x86, 0xda, 0x5f, 0x52, 0x55, 0xcb,
	0xa6, 0xd5, 0x56, 0xe3, 0x4d, 0x0f, 0xf9, 0x1f, 0x06, 0x2f, 0x3e, 0x92, 0xa5, 0xd2, 0x4a, 0xad,
	0x04, 0x99, 0x46, 0x2b, 0x43, 0x88, 0x10, 0xda, 0x7d, 0x43, 0x09, 0x4b, 0xd9, 0xe2, 0x56, 0xb8,
	0xdf, 0x38, 0x87, 0xb8, 0xd1, 0x52, 0x59, 0x93, 0x5c, 0xa7, 0xc1, 0xe2, 0x2e, 0x7b, 0x58, 0x1e,
	0x2c, 0x57, 0xdd, 0x58, 0xf4, 0x2c, 0xbe, 0x81, 0x1b, 0x5d, 0x6c, 0xa8, 0xb4, 0x26, 0x09, 0x9c,
	0xf0, 0x71, 0x10, 0x7e, 0x76, 0x73, 0x71, 0xe0, 0x31, 0x03, 0x68, 0xa9, 0xb4, 0xb9, 0xaa, 0xb6,
	0x64, 0x92, 0xd0, 0xa9, 0x71, 0x50, 0x8b, 0x03, 0x25, 0x46, 0x2a, 0xbe, 0x82, 0xe7, 0xa3, 0xbc,
	0x3f, 0x7e, 0x92, 0xb1, 0xf8, 0x12, 0x22, 0xf9, 0x3d, 0xaf, 0x7c, 0xde, 0x7b, 0xe1, 0x01, 0xce,
	0x21, 0xec, 0xf6, 0x92, 0xeb, 0x94, 0xfd, 0xc7, 0xd7, 0xf1, 0xfc, 0x35, 0x44, 0xee, 0x02, 0xbc,
	0x07, 0xb6, 0x73, 0x16, 0x91, 0x60, 0xbb, 0x0e, 0xed, 0xdd, 0x6e, 0x24, 0xd8, 0x9e, 0x7f, 0x85,
	0xdb, 0x61, 0xef, 0x9c, 0xb0, 0xcb, 0xf2, 0x5b, 0x7e, 0xb3, 0x75, 0x12, 0xb8, 0x89, 0x07, 0x38,
	0x81, 0xb8, 0x26, 0x59, 0xd5, 0x36, 0x09, 0xdd, 0xb8, 0x47, 0x5c, 0x40, 0x2c, 0xa8, 0x92, 0x5a,
	0x3d, 0xa1, 0xa7, 0x84, 0x68, 0x5d, 0xe7, 0x0d, 0x61, 0x0a, 0x77, 0xa5, 0x56, 0x96, 0x94, 0xfd,
	0x72, 0x2c, 0x73, 0x3c, 0xba, 0xb8, 0xd3, 0x09, 0xc4, 0x86, 0x5a, 0x49, 0xbe, 0xd2, 0x48, 0xf4,
	0x88, 0x6f, 0x20, 0xf6, 0x9d, 0x76, 0x11, 0xb7, 0x79, 0x41, 0xdb, 0xfe, 0x5f, 0x3c, 0xc0, 0x19,
	0x04, 0x85, 0xde, 0x9d, 0x69, 0xa0, 0xa3, 0x71, 0x06, 0x91, 0xe9, 0x02, 0xbb, 0xf3, 0xc6, 0x21,
	0xdc, 0x19, 0xc2, 0x93, 0xd9, 0x1a, 0x1e, 0x1c, 0x1e, 0xda, 0xc7, 0x0f, 0x10, 0x7b, 0x80, 0xaf,
	0x86, 0x95, 0xd3, 0xb7, 0x31, 0x9d, 0xfe, 0x8b, 0xf2, 0xcf, 0x9c, 0x5f, 0x65, 0x9f, 0xe0, 0xd1,
	0x1f, 0x70, 0x74, 0x7d, 0x7f, 0x89, 0xeb, 0xe9, 0x9b, 0xe6, 0x57, 0x6f, 0x59, 0x11, 0xbb, 0x6f,
	0xeb, 0xdd, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x71, 0xdb, 0x8d, 0xd9, 0x6c, 0x03, 0x00, 0x00,
}
