// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: serving.proto

#include "serving.pb.h"
#include "serving.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace serving {

static const char* ShapeDetection_method_names[] = {
  "/serving.ShapeDetection/Detect",
};

std::unique_ptr< ShapeDetection::Stub> ShapeDetection::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ShapeDetection::Stub> stub(new ShapeDetection::Stub(channel));
  return stub;
}

ShapeDetection::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Detect_(ShapeDetection_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ShapeDetection::Stub::Detect(::grpc::ClientContext* context, const ::serving::DetectionRequest& request, ::serving::DetectionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Detect_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::serving::DetectionResponse>* ShapeDetection::Stub::AsyncDetectRaw(::grpc::ClientContext* context, const ::serving::DetectionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::serving::DetectionResponse>::Create(channel_.get(), cq, rpcmethod_Detect_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::serving::DetectionResponse>* ShapeDetection::Stub::PrepareAsyncDetectRaw(::grpc::ClientContext* context, const ::serving::DetectionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::serving::DetectionResponse>::Create(channel_.get(), cq, rpcmethod_Detect_, context, request, false);
}

ShapeDetection::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ShapeDetection_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ShapeDetection::Service, ::serving::DetectionRequest, ::serving::DetectionResponse>(
          std::mem_fn(&ShapeDetection::Service::Detect), this)));
}

ShapeDetection::Service::~Service() {
}

::grpc::Status ShapeDetection::Service::Detect(::grpc::ServerContext* context, const ::serving::DetectionRequest* request, ::serving::DetectionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* ObjectDetection_method_names[] = {
  "/serving.ObjectDetection/DetectStream",
  "/serving.ObjectDetection/Detect",
};

std::unique_ptr< ObjectDetection::Stub> ObjectDetection::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ObjectDetection::Stub> stub(new ObjectDetection::Stub(channel));
  return stub;
}

ObjectDetection::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_DetectStream_(ObjectDetection_method_names[0], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_Detect_(ObjectDetection_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReader< ::serving::Object>* ObjectDetection::Stub::DetectStreamRaw(::grpc::ClientContext* context, const ::serving::DetectionRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::serving::Object>::Create(channel_.get(), rpcmethod_DetectStream_, context, request);
}

::grpc::ClientAsyncReader< ::serving::Object>* ObjectDetection::Stub::AsyncDetectStreamRaw(::grpc::ClientContext* context, const ::serving::DetectionRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::serving::Object>::Create(channel_.get(), cq, rpcmethod_DetectStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::serving::Object>* ObjectDetection::Stub::PrepareAsyncDetectStreamRaw(::grpc::ClientContext* context, const ::serving::DetectionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::serving::Object>::Create(channel_.get(), cq, rpcmethod_DetectStream_, context, request, false, nullptr);
}

::grpc::Status ObjectDetection::Stub::Detect(::grpc::ClientContext* context, const ::serving::DetectionRequest& request, ::serving::DetectionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Detect_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::serving::DetectionResponse>* ObjectDetection::Stub::AsyncDetectRaw(::grpc::ClientContext* context, const ::serving::DetectionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::serving::DetectionResponse>::Create(channel_.get(), cq, rpcmethod_Detect_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::serving::DetectionResponse>* ObjectDetection::Stub::PrepareAsyncDetectRaw(::grpc::ClientContext* context, const ::serving::DetectionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::serving::DetectionResponse>::Create(channel_.get(), cq, rpcmethod_Detect_, context, request, false);
}

ObjectDetection::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ObjectDetection_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ObjectDetection::Service, ::serving::DetectionRequest, ::serving::Object>(
          std::mem_fn(&ObjectDetection::Service::DetectStream), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ObjectDetection_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ObjectDetection::Service, ::serving::DetectionRequest, ::serving::DetectionResponse>(
          std::mem_fn(&ObjectDetection::Service::Detect), this)));
}

ObjectDetection::Service::~Service() {
}

::grpc::Status ObjectDetection::Service::DetectStream(::grpc::ServerContext* context, const ::serving::DetectionRequest* request, ::grpc::ServerWriter< ::serving::Object>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ObjectDetection::Service::Detect(::grpc::ServerContext* context, const ::serving::DetectionRequest* request, ::serving::DetectionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace serving

