// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: serving.proto

#ifndef PROTOBUF_INCLUDED_serving_2eproto
#define PROTOBUF_INCLUDED_serving_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_serving_2eproto 

namespace protobuf_serving_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_serving_2eproto
namespace serving {
class DetectionRequest;
class DetectionRequestDefaultTypeInternal;
extern DetectionRequestDefaultTypeInternal _DetectionRequest_default_instance_;
class DetectionResponse;
class DetectionResponseDefaultTypeInternal;
extern DetectionResponseDefaultTypeInternal _DetectionResponse_default_instance_;
class Object;
class ObjectDefaultTypeInternal;
extern ObjectDefaultTypeInternal _Object_default_instance_;
class Point;
class PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class Rectangle;
class RectangleDefaultTypeInternal;
extern RectangleDefaultTypeInternal _Rectangle_default_instance_;
class Region;
class RegionDefaultTypeInternal;
extern RegionDefaultTypeInternal _Region_default_instance_;
class Shape;
class ShapeDefaultTypeInternal;
extern ShapeDefaultTypeInternal _Shape_default_instance_;
}  // namespace serving
namespace google {
namespace protobuf {
template<> ::serving::DetectionRequest* Arena::CreateMaybeMessage<::serving::DetectionRequest>(Arena*);
template<> ::serving::DetectionResponse* Arena::CreateMaybeMessage<::serving::DetectionResponse>(Arena*);
template<> ::serving::Object* Arena::CreateMaybeMessage<::serving::Object>(Arena*);
template<> ::serving::Point* Arena::CreateMaybeMessage<::serving::Point>(Arena*);
template<> ::serving::Rectangle* Arena::CreateMaybeMessage<::serving::Rectangle>(Arena*);
template<> ::serving::Region* Arena::CreateMaybeMessage<::serving::Region>(Arena*);
template<> ::serving::Shape* Arena::CreateMaybeMessage<::serving::Shape>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace serving {

// ===================================================================

class DetectionResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:serving.DetectionResponse) */ {
 public:
  DetectionResponse();
  virtual ~DetectionResponse();

  DetectionResponse(const DetectionResponse& from);

  inline DetectionResponse& operator=(const DetectionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DetectionResponse(DetectionResponse&& from) noexcept
    : DetectionResponse() {
    *this = ::std::move(from);
  }

  inline DetectionResponse& operator=(DetectionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DetectionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DetectionResponse* internal_default_instance() {
    return reinterpret_cast<const DetectionResponse*>(
               &_DetectionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(DetectionResponse* other);
  friend void swap(DetectionResponse& a, DetectionResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DetectionResponse* New() const final {
    return CreateMaybeMessage<DetectionResponse>(NULL);
  }

  DetectionResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DetectionResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DetectionResponse& from);
  void MergeFrom(const DetectionResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetectionResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .serving.Point points = 2;
  int points_size() const;
  void clear_points();
  static const int kPointsFieldNumber = 2;
  ::serving::Point* mutable_points(int index);
  ::google::protobuf::RepeatedPtrField< ::serving::Point >*
      mutable_points();
  const ::serving::Point& points(int index) const;
  ::serving::Point* add_points();
  const ::google::protobuf::RepeatedPtrField< ::serving::Point >&
      points() const;

  // repeated .serving.Object objects = 3;
  int objects_size() const;
  void clear_objects();
  static const int kObjectsFieldNumber = 3;
  ::serving::Object* mutable_objects(int index);
  ::google::protobuf::RepeatedPtrField< ::serving::Object >*
      mutable_objects();
  const ::serving::Object& objects(int index) const;
  ::serving::Object* add_objects();
  const ::google::protobuf::RepeatedPtrField< ::serving::Object >&
      objects() const;

  // repeated .serving.Rectangle rectangles = 4;
  int rectangles_size() const;
  void clear_rectangles();
  static const int kRectanglesFieldNumber = 4;
  ::serving::Rectangle* mutable_rectangles(int index);
  ::google::protobuf::RepeatedPtrField< ::serving::Rectangle >*
      mutable_rectangles();
  const ::serving::Rectangle& rectangles(int index) const;
  ::serving::Rectangle* add_rectangles();
  const ::google::protobuf::RepeatedPtrField< ::serving::Rectangle >&
      rectangles() const;

  // string type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // @@protoc_insertion_point(class_scope:serving.DetectionResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::serving::Point > points_;
  ::google::protobuf::RepeatedPtrField< ::serving::Object > objects_;
  ::google::protobuf::RepeatedPtrField< ::serving::Rectangle > rectangles_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_serving_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DetectionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:serving.DetectionRequest) */ {
 public:
  DetectionRequest();
  virtual ~DetectionRequest();

  DetectionRequest(const DetectionRequest& from);

  inline DetectionRequest& operator=(const DetectionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DetectionRequest(DetectionRequest&& from) noexcept
    : DetectionRequest() {
    *this = ::std::move(from);
  }

  inline DetectionRequest& operator=(DetectionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DetectionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DetectionRequest* internal_default_instance() {
    return reinterpret_cast<const DetectionRequest*>(
               &_DetectionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(DetectionRequest* other);
  friend void swap(DetectionRequest& a, DetectionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DetectionRequest* New() const final {
    return CreateMaybeMessage<DetectionRequest>(NULL);
  }

  DetectionRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DetectionRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DetectionRequest& from);
  void MergeFrom(const DetectionRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetectionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes image = 1;
  void clear_image();
  static const int kImageFieldNumber = 1;
  const ::std::string& image() const;
  void set_image(const ::std::string& value);
  #if LANG_CXX11
  void set_image(::std::string&& value);
  #endif
  void set_image(const char* value);
  void set_image(const void* value, size_t size);
  ::std::string* mutable_image();
  ::std::string* release_image();
  void set_allocated_image(::std::string* image);

  // .serving.Rectangle region = 2;
  bool has_region() const;
  void clear_region();
  static const int kRegionFieldNumber = 2;
  private:
  const ::serving::Rectangle& _internal_region() const;
  public:
  const ::serving::Rectangle& region() const;
  ::serving::Rectangle* release_region();
  ::serving::Rectangle* mutable_region();
  void set_allocated_region(::serving::Rectangle* region);

  // @@protoc_insertion_point(class_scope:serving.DetectionRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr image_;
  ::serving::Rectangle* region_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_serving_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Point : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:serving.Point) */ {
 public:
  Point();
  virtual ~Point();

  Point(const Point& from);

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(Point&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Point& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Point* other);
  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Point* New() const final {
    return CreateMaybeMessage<Point>(NULL);
  }

  Point* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // int32 y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:serving.Point)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_serving_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Rectangle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:serving.Rectangle) */ {
 public:
  Rectangle();
  virtual ~Rectangle();

  Rectangle(const Rectangle& from);

  inline Rectangle& operator=(const Rectangle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rectangle(Rectangle&& from) noexcept
    : Rectangle() {
    *this = ::std::move(from);
  }

  inline Rectangle& operator=(Rectangle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Rectangle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rectangle* internal_default_instance() {
    return reinterpret_cast<const Rectangle*>(
               &_Rectangle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Rectangle* other);
  friend void swap(Rectangle& a, Rectangle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rectangle* New() const final {
    return CreateMaybeMessage<Rectangle>(NULL);
  }

  Rectangle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rectangle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rectangle& from);
  void MergeFrom(const Rectangle& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rectangle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // int32 y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // int32 width = 3;
  void clear_width();
  static const int kWidthFieldNumber = 3;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // int32 height = 4;
  void clear_height();
  static const int kHeightFieldNumber = 4;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:serving.Rectangle)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_serving_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Region : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:serving.Region) */ {
 public:
  Region();
  virtual ~Region();

  Region(const Region& from);

  inline Region& operator=(const Region& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Region(Region&& from) noexcept
    : Region() {
    *this = ::std::move(from);
  }

  inline Region& operator=(Region&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Region& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Region* internal_default_instance() {
    return reinterpret_cast<const Region*>(
               &_Region_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Region* other);
  friend void swap(Region& a, Region& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Region* New() const final {
    return CreateMaybeMessage<Region>(NULL);
  }

  Region* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Region>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Region& from);
  void MergeFrom(const Region& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Region* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // int32 y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // int32 width = 3;
  void clear_width();
  static const int kWidthFieldNumber = 3;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // int32 height = 4;
  void clear_height();
  static const int kHeightFieldNumber = 4;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:serving.Region)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_serving_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Shape : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:serving.Shape) */ {
 public:
  Shape();
  virtual ~Shape();

  Shape(const Shape& from);

  inline Shape& operator=(const Shape& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Shape(Shape&& from) noexcept
    : Shape() {
    *this = ::std::move(from);
  }

  inline Shape& operator=(Shape&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Shape& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Shape* internal_default_instance() {
    return reinterpret_cast<const Shape*>(
               &_Shape_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Shape* other);
  friend void swap(Shape& a, Shape& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Shape* New() const final {
    return CreateMaybeMessage<Shape>(NULL);
  }

  Shape* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Shape>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Shape& from);
  void MergeFrom(const Shape& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Shape* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .serving.Point points = 2;
  int points_size() const;
  void clear_points();
  static const int kPointsFieldNumber = 2;
  ::serving::Point* mutable_points(int index);
  ::google::protobuf::RepeatedPtrField< ::serving::Point >*
      mutable_points();
  const ::serving::Point& points(int index) const;
  ::serving::Point* add_points();
  const ::google::protobuf::RepeatedPtrField< ::serving::Point >&
      points() const;

  // repeated int32 series = 3;
  int series_size() const;
  void clear_series();
  static const int kSeriesFieldNumber = 3;
  ::google::protobuf::int32 series(int index) const;
  void set_series(int index, ::google::protobuf::int32 value);
  void add_series(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      series() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_series();

  // string contentType = 1;
  void clear_contenttype();
  static const int kContentTypeFieldNumber = 1;
  const ::std::string& contenttype() const;
  void set_contenttype(const ::std::string& value);
  #if LANG_CXX11
  void set_contenttype(::std::string&& value);
  #endif
  void set_contenttype(const char* value);
  void set_contenttype(const char* value, size_t size);
  ::std::string* mutable_contenttype();
  ::std::string* release_contenttype();
  void set_allocated_contenttype(::std::string* contenttype);

  // @@protoc_insertion_point(class_scope:serving.Shape)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::serving::Point > points_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > series_;
  mutable int _series_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr contenttype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_serving_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Object : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:serving.Object) */ {
 public:
  Object();
  virtual ~Object();

  Object(const Object& from);

  inline Object& operator=(const Object& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Object(Object&& from) noexcept
    : Object() {
    *this = ::std::move(from);
  }

  inline Object& operator=(Object&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Object& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Object* internal_default_instance() {
    return reinterpret_cast<const Object*>(
               &_Object_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Object* other);
  friend void swap(Object& a, Object& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Object* New() const final {
    return CreateMaybeMessage<Object>(NULL);
  }

  Object* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Object>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Object& from);
  void MergeFrom(const Object& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Object* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string label = 1;
  void clear_label();
  static const int kLabelFieldNumber = 1;
  const ::std::string& label() const;
  void set_label(const ::std::string& value);
  #if LANG_CXX11
  void set_label(::std::string&& value);
  #endif
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  ::std::string* mutable_label();
  ::std::string* release_label();
  void set_allocated_label(::std::string* label);

  // .serving.Rectangle box = 2;
  bool has_box() const;
  void clear_box();
  static const int kBoxFieldNumber = 2;
  private:
  const ::serving::Rectangle& _internal_box() const;
  public:
  const ::serving::Rectangle& box() const;
  ::serving::Rectangle* release_box();
  ::serving::Rectangle* mutable_box();
  void set_allocated_box(::serving::Rectangle* box);

  // .serving.Shape shape = 3;
  bool has_shape() const;
  void clear_shape();
  static const int kShapeFieldNumber = 3;
  private:
  const ::serving::Shape& _internal_shape() const;
  public:
  const ::serving::Shape& shape() const;
  ::serving::Shape* release_shape();
  ::serving::Shape* mutable_shape();
  void set_allocated_shape(::serving::Shape* shape);

  // @@protoc_insertion_point(class_scope:serving.Object)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr label_;
  ::serving::Rectangle* box_;
  ::serving::Shape* shape_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_serving_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DetectionResponse

// string type = 1;
inline void DetectionResponse::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DetectionResponse::type() const {
  // @@protoc_insertion_point(field_get:serving.DetectionResponse.type)
  return type_.GetNoArena();
}
inline void DetectionResponse::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:serving.DetectionResponse.type)
}
#if LANG_CXX11
inline void DetectionResponse::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:serving.DetectionResponse.type)
}
#endif
inline void DetectionResponse::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:serving.DetectionResponse.type)
}
inline void DetectionResponse::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:serving.DetectionResponse.type)
}
inline ::std::string* DetectionResponse::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:serving.DetectionResponse.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DetectionResponse::release_type() {
  // @@protoc_insertion_point(field_release:serving.DetectionResponse.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DetectionResponse::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:serving.DetectionResponse.type)
}

// repeated .serving.Point points = 2;
inline int DetectionResponse::points_size() const {
  return points_.size();
}
inline void DetectionResponse::clear_points() {
  points_.Clear();
}
inline ::serving::Point* DetectionResponse::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:serving.DetectionResponse.points)
  return points_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::serving::Point >*
DetectionResponse::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:serving.DetectionResponse.points)
  return &points_;
}
inline const ::serving::Point& DetectionResponse::points(int index) const {
  // @@protoc_insertion_point(field_get:serving.DetectionResponse.points)
  return points_.Get(index);
}
inline ::serving::Point* DetectionResponse::add_points() {
  // @@protoc_insertion_point(field_add:serving.DetectionResponse.points)
  return points_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::serving::Point >&
DetectionResponse::points() const {
  // @@protoc_insertion_point(field_list:serving.DetectionResponse.points)
  return points_;
}

// repeated .serving.Object objects = 3;
inline int DetectionResponse::objects_size() const {
  return objects_.size();
}
inline void DetectionResponse::clear_objects() {
  objects_.Clear();
}
inline ::serving::Object* DetectionResponse::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:serving.DetectionResponse.objects)
  return objects_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::serving::Object >*
DetectionResponse::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:serving.DetectionResponse.objects)
  return &objects_;
}
inline const ::serving::Object& DetectionResponse::objects(int index) const {
  // @@protoc_insertion_point(field_get:serving.DetectionResponse.objects)
  return objects_.Get(index);
}
inline ::serving::Object* DetectionResponse::add_objects() {
  // @@protoc_insertion_point(field_add:serving.DetectionResponse.objects)
  return objects_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::serving::Object >&
DetectionResponse::objects() const {
  // @@protoc_insertion_point(field_list:serving.DetectionResponse.objects)
  return objects_;
}

// repeated .serving.Rectangle rectangles = 4;
inline int DetectionResponse::rectangles_size() const {
  return rectangles_.size();
}
inline void DetectionResponse::clear_rectangles() {
  rectangles_.Clear();
}
inline ::serving::Rectangle* DetectionResponse::mutable_rectangles(int index) {
  // @@protoc_insertion_point(field_mutable:serving.DetectionResponse.rectangles)
  return rectangles_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::serving::Rectangle >*
DetectionResponse::mutable_rectangles() {
  // @@protoc_insertion_point(field_mutable_list:serving.DetectionResponse.rectangles)
  return &rectangles_;
}
inline const ::serving::Rectangle& DetectionResponse::rectangles(int index) const {
  // @@protoc_insertion_point(field_get:serving.DetectionResponse.rectangles)
  return rectangles_.Get(index);
}
inline ::serving::Rectangle* DetectionResponse::add_rectangles() {
  // @@protoc_insertion_point(field_add:serving.DetectionResponse.rectangles)
  return rectangles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::serving::Rectangle >&
DetectionResponse::rectangles() const {
  // @@protoc_insertion_point(field_list:serving.DetectionResponse.rectangles)
  return rectangles_;
}

// -------------------------------------------------------------------

// DetectionRequest

// bytes image = 1;
inline void DetectionRequest::clear_image() {
  image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DetectionRequest::image() const {
  // @@protoc_insertion_point(field_get:serving.DetectionRequest.image)
  return image_.GetNoArena();
}
inline void DetectionRequest::set_image(const ::std::string& value) {
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:serving.DetectionRequest.image)
}
#if LANG_CXX11
inline void DetectionRequest::set_image(::std::string&& value) {
  
  image_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:serving.DetectionRequest.image)
}
#endif
inline void DetectionRequest::set_image(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:serving.DetectionRequest.image)
}
inline void DetectionRequest::set_image(const void* value, size_t size) {
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:serving.DetectionRequest.image)
}
inline ::std::string* DetectionRequest::mutable_image() {
  
  // @@protoc_insertion_point(field_mutable:serving.DetectionRequest.image)
  return image_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DetectionRequest::release_image() {
  // @@protoc_insertion_point(field_release:serving.DetectionRequest.image)
  
  return image_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DetectionRequest::set_allocated_image(::std::string* image) {
  if (image != NULL) {
    
  } else {
    
  }
  image_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image);
  // @@protoc_insertion_point(field_set_allocated:serving.DetectionRequest.image)
}

// .serving.Rectangle region = 2;
inline bool DetectionRequest::has_region() const {
  return this != internal_default_instance() && region_ != NULL;
}
inline void DetectionRequest::clear_region() {
  if (GetArenaNoVirtual() == NULL && region_ != NULL) {
    delete region_;
  }
  region_ = NULL;
}
inline const ::serving::Rectangle& DetectionRequest::_internal_region() const {
  return *region_;
}
inline const ::serving::Rectangle& DetectionRequest::region() const {
  const ::serving::Rectangle* p = region_;
  // @@protoc_insertion_point(field_get:serving.DetectionRequest.region)
  return p != NULL ? *p : *reinterpret_cast<const ::serving::Rectangle*>(
      &::serving::_Rectangle_default_instance_);
}
inline ::serving::Rectangle* DetectionRequest::release_region() {
  // @@protoc_insertion_point(field_release:serving.DetectionRequest.region)
  
  ::serving::Rectangle* temp = region_;
  region_ = NULL;
  return temp;
}
inline ::serving::Rectangle* DetectionRequest::mutable_region() {
  
  if (region_ == NULL) {
    auto* p = CreateMaybeMessage<::serving::Rectangle>(GetArenaNoVirtual());
    region_ = p;
  }
  // @@protoc_insertion_point(field_mutable:serving.DetectionRequest.region)
  return region_;
}
inline void DetectionRequest::set_allocated_region(::serving::Rectangle* region) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete region_;
  }
  if (region) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      region = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, region, submessage_arena);
    }
    
  } else {
    
  }
  region_ = region;
  // @@protoc_insertion_point(field_set_allocated:serving.DetectionRequest.region)
}

// -------------------------------------------------------------------

// Point

// int32 x = 1;
inline void Point::clear_x() {
  x_ = 0;
}
inline ::google::protobuf::int32 Point::x() const {
  // @@protoc_insertion_point(field_get:serving.Point.x)
  return x_;
}
inline void Point::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:serving.Point.x)
}

// int32 y = 2;
inline void Point::clear_y() {
  y_ = 0;
}
inline ::google::protobuf::int32 Point::y() const {
  // @@protoc_insertion_point(field_get:serving.Point.y)
  return y_;
}
inline void Point::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:serving.Point.y)
}

// -------------------------------------------------------------------

// Rectangle

// int32 x = 1;
inline void Rectangle::clear_x() {
  x_ = 0;
}
inline ::google::protobuf::int32 Rectangle::x() const {
  // @@protoc_insertion_point(field_get:serving.Rectangle.x)
  return x_;
}
inline void Rectangle::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:serving.Rectangle.x)
}

// int32 y = 2;
inline void Rectangle::clear_y() {
  y_ = 0;
}
inline ::google::protobuf::int32 Rectangle::y() const {
  // @@protoc_insertion_point(field_get:serving.Rectangle.y)
  return y_;
}
inline void Rectangle::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:serving.Rectangle.y)
}

// int32 width = 3;
inline void Rectangle::clear_width() {
  width_ = 0;
}
inline ::google::protobuf::int32 Rectangle::width() const {
  // @@protoc_insertion_point(field_get:serving.Rectangle.width)
  return width_;
}
inline void Rectangle::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:serving.Rectangle.width)
}

// int32 height = 4;
inline void Rectangle::clear_height() {
  height_ = 0;
}
inline ::google::protobuf::int32 Rectangle::height() const {
  // @@protoc_insertion_point(field_get:serving.Rectangle.height)
  return height_;
}
inline void Rectangle::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:serving.Rectangle.height)
}

// -------------------------------------------------------------------

// Region

// int32 x = 1;
inline void Region::clear_x() {
  x_ = 0;
}
inline ::google::protobuf::int32 Region::x() const {
  // @@protoc_insertion_point(field_get:serving.Region.x)
  return x_;
}
inline void Region::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:serving.Region.x)
}

// int32 y = 2;
inline void Region::clear_y() {
  y_ = 0;
}
inline ::google::protobuf::int32 Region::y() const {
  // @@protoc_insertion_point(field_get:serving.Region.y)
  return y_;
}
inline void Region::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:serving.Region.y)
}

// int32 width = 3;
inline void Region::clear_width() {
  width_ = 0;
}
inline ::google::protobuf::int32 Region::width() const {
  // @@protoc_insertion_point(field_get:serving.Region.width)
  return width_;
}
inline void Region::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:serving.Region.width)
}

// int32 height = 4;
inline void Region::clear_height() {
  height_ = 0;
}
inline ::google::protobuf::int32 Region::height() const {
  // @@protoc_insertion_point(field_get:serving.Region.height)
  return height_;
}
inline void Region::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:serving.Region.height)
}

// -------------------------------------------------------------------

// Shape

// string contentType = 1;
inline void Shape::clear_contenttype() {
  contenttype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Shape::contenttype() const {
  // @@protoc_insertion_point(field_get:serving.Shape.contentType)
  return contenttype_.GetNoArena();
}
inline void Shape::set_contenttype(const ::std::string& value) {
  
  contenttype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:serving.Shape.contentType)
}
#if LANG_CXX11
inline void Shape::set_contenttype(::std::string&& value) {
  
  contenttype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:serving.Shape.contentType)
}
#endif
inline void Shape::set_contenttype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  contenttype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:serving.Shape.contentType)
}
inline void Shape::set_contenttype(const char* value, size_t size) {
  
  contenttype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:serving.Shape.contentType)
}
inline ::std::string* Shape::mutable_contenttype() {
  
  // @@protoc_insertion_point(field_mutable:serving.Shape.contentType)
  return contenttype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Shape::release_contenttype() {
  // @@protoc_insertion_point(field_release:serving.Shape.contentType)
  
  return contenttype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Shape::set_allocated_contenttype(::std::string* contenttype) {
  if (contenttype != NULL) {
    
  } else {
    
  }
  contenttype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contenttype);
  // @@protoc_insertion_point(field_set_allocated:serving.Shape.contentType)
}

// repeated .serving.Point points = 2;
inline int Shape::points_size() const {
  return points_.size();
}
inline void Shape::clear_points() {
  points_.Clear();
}
inline ::serving::Point* Shape::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:serving.Shape.points)
  return points_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::serving::Point >*
Shape::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:serving.Shape.points)
  return &points_;
}
inline const ::serving::Point& Shape::points(int index) const {
  // @@protoc_insertion_point(field_get:serving.Shape.points)
  return points_.Get(index);
}
inline ::serving::Point* Shape::add_points() {
  // @@protoc_insertion_point(field_add:serving.Shape.points)
  return points_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::serving::Point >&
Shape::points() const {
  // @@protoc_insertion_point(field_list:serving.Shape.points)
  return points_;
}

// repeated int32 series = 3;
inline int Shape::series_size() const {
  return series_.size();
}
inline void Shape::clear_series() {
  series_.Clear();
}
inline ::google::protobuf::int32 Shape::series(int index) const {
  // @@protoc_insertion_point(field_get:serving.Shape.series)
  return series_.Get(index);
}
inline void Shape::set_series(int index, ::google::protobuf::int32 value) {
  series_.Set(index, value);
  // @@protoc_insertion_point(field_set:serving.Shape.series)
}
inline void Shape::add_series(::google::protobuf::int32 value) {
  series_.Add(value);
  // @@protoc_insertion_point(field_add:serving.Shape.series)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Shape::series() const {
  // @@protoc_insertion_point(field_list:serving.Shape.series)
  return series_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Shape::mutable_series() {
  // @@protoc_insertion_point(field_mutable_list:serving.Shape.series)
  return &series_;
}

// -------------------------------------------------------------------

// Object

// string label = 1;
inline void Object::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Object::label() const {
  // @@protoc_insertion_point(field_get:serving.Object.label)
  return label_.GetNoArena();
}
inline void Object::set_label(const ::std::string& value) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:serving.Object.label)
}
#if LANG_CXX11
inline void Object::set_label(::std::string&& value) {
  
  label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:serving.Object.label)
}
#endif
inline void Object::set_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:serving.Object.label)
}
inline void Object::set_label(const char* value, size_t size) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:serving.Object.label)
}
inline ::std::string* Object::mutable_label() {
  
  // @@protoc_insertion_point(field_mutable:serving.Object.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Object::release_label() {
  // @@protoc_insertion_point(field_release:serving.Object.label)
  
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Object::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    
  } else {
    
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:serving.Object.label)
}

// .serving.Rectangle box = 2;
inline bool Object::has_box() const {
  return this != internal_default_instance() && box_ != NULL;
}
inline void Object::clear_box() {
  if (GetArenaNoVirtual() == NULL && box_ != NULL) {
    delete box_;
  }
  box_ = NULL;
}
inline const ::serving::Rectangle& Object::_internal_box() const {
  return *box_;
}
inline const ::serving::Rectangle& Object::box() const {
  const ::serving::Rectangle* p = box_;
  // @@protoc_insertion_point(field_get:serving.Object.box)
  return p != NULL ? *p : *reinterpret_cast<const ::serving::Rectangle*>(
      &::serving::_Rectangle_default_instance_);
}
inline ::serving::Rectangle* Object::release_box() {
  // @@protoc_insertion_point(field_release:serving.Object.box)
  
  ::serving::Rectangle* temp = box_;
  box_ = NULL;
  return temp;
}
inline ::serving::Rectangle* Object::mutable_box() {
  
  if (box_ == NULL) {
    auto* p = CreateMaybeMessage<::serving::Rectangle>(GetArenaNoVirtual());
    box_ = p;
  }
  // @@protoc_insertion_point(field_mutable:serving.Object.box)
  return box_;
}
inline void Object::set_allocated_box(::serving::Rectangle* box) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete box_;
  }
  if (box) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      box = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, box, submessage_arena);
    }
    
  } else {
    
  }
  box_ = box;
  // @@protoc_insertion_point(field_set_allocated:serving.Object.box)
}

// .serving.Shape shape = 3;
inline bool Object::has_shape() const {
  return this != internal_default_instance() && shape_ != NULL;
}
inline void Object::clear_shape() {
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) {
    delete shape_;
  }
  shape_ = NULL;
}
inline const ::serving::Shape& Object::_internal_shape() const {
  return *shape_;
}
inline const ::serving::Shape& Object::shape() const {
  const ::serving::Shape* p = shape_;
  // @@protoc_insertion_point(field_get:serving.Object.shape)
  return p != NULL ? *p : *reinterpret_cast<const ::serving::Shape*>(
      &::serving::_Shape_default_instance_);
}
inline ::serving::Shape* Object::release_shape() {
  // @@protoc_insertion_point(field_release:serving.Object.shape)
  
  ::serving::Shape* temp = shape_;
  shape_ = NULL;
  return temp;
}
inline ::serving::Shape* Object::mutable_shape() {
  
  if (shape_ == NULL) {
    auto* p = CreateMaybeMessage<::serving::Shape>(GetArenaNoVirtual());
    shape_ = p;
  }
  // @@protoc_insertion_point(field_mutable:serving.Object.shape)
  return shape_;
}
inline void Object::set_allocated_shape(::serving::Shape* shape) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete shape_;
  }
  if (shape) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      shape = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, shape, submessage_arena);
    }
    
  } else {
    
  }
  shape_ = shape;
  // @@protoc_insertion_point(field_set_allocated:serving.Object.shape)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace serving

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_serving_2eproto
